import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk, ImageDraw
import os
import subprocess
import shutil
import psutil

class GradientApp:
    def __init__(self, root):
        self.root = root
        self.root.title("InstaPrint Machine")
        self.root.attributes('-fullscreen', True)

        # Initialize variables
        self.current_slide = 1
        self.file_path = None
        self.size_var = tk.StringVar(value="short")
        self.color_var = tk.StringVar(value="black_and_white")
        self.print_option_var = tk.StringVar(value="whole_file")
        self.copies_var = tk.StringVar(value="1")

        # Price configuration
        self.prices = {
            "size": {
                "short": 1.00,
                "long": 2.00
            },
            "color": {
                "black_and_white": 2.00,
                "color": 3.00
            }
        }

        # Create canvas to draw on (used for the gradient background and widget placement)
        self.canvas = tk.Canvas(root, highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True)

        # Load logo (assumes "InstaPrint Logo.png" is in the same folder)
        self.logo_path = "InstaPrint Logo.png"
        self.logo_tk = self.create_circular_logo(self.logo_path, size=500)

        # Initial setup: draw the first slide
        self.draw_slide()
        self.root.bind("<Escape>", lambda e: root.destroy())
        self.canvas.bind("<Configure>", self.draw_slide)

    def create_circular_logo(self, image_path, size=400):
        """Creates a circular version of the logo image."""
        img = Image.open(image_path).convert("RGBA").resize((size, size))
        mask = Image.new("L", (size, size), 0)
        ImageDraw.Draw(mask).ellipse((0, 0, size, size), fill=250)
        circular_img = Image.new("RGBA", (size, size))
        circular_img.paste(img, (0, 0), mask)
        return ImageTk.PhotoImage(circular_img)

    def draw_gradient(self, width, height, start_color, end_color):
        """Draws a smooth gradient on the canvas."""
        self.canvas.delete("all")
        r1, g1, b1 = self.canvas.winfo_rgb(start_color)
        r2, g2, b2 = self.canvas.winfo_rgb(end_color)
        for i in range(height):
            r = int(r1 + (r2 - r1) * (i / height))
            g = int(g1 + (g2 - g1) * (i / height))
            b = int(b1 + (b2 - b1) * (i / height))
            color = f'#{r // 256:02x}{g // 256:02x}{b // 256:02x}'
            self.canvas.create_line(0, i, width, i, fill=color)

    def draw_slide(self, event=None):
        """Handles redrawing the current slide based on self.current_slide."""
        width, height = self.root.winfo_screenwidth(), self.root.winfo_screenheight()
        # Use new gradient colors for the updated design
        self.draw_gradient(width, height, "#1A237E", "#64B5F6")
        if self.current_slide == 1:
            self.display_slide1(width, height)
        elif self.current_slide == 2:
            self.display_slide2(width, height)
        elif self.current_slide == 3:
            self.display_slide3(width, height)
        elif self.current_slide == 4:
            self.display_slide4(width, height)
        elif self.current_slide == 5:
            self.display_slide5(width, height)
        self.canvas.update_idletasks()

    def next_slide(self):
        """Handles transitions between slides."""
        if self.current_slide == 1:
            self.current_slide = 2
        elif self.current_slide == 2:
            # Transition only if a file has been uploaded or transferred via USB.
            if self.file_path:
                self.current_slide = 3
        elif self.current_slide == 3:
            self.current_slide = 4
        elif self.current_slide == 4:
            self.current_slide = 5
        elif self.current_slide == 5:
            self.current_slide = 6  # Future printing logic can be added here.
        self.draw_slide()

    def previous_slide(self):
        """Handles going back to the previous slide."""
        if self.current_slide > 1:
            self.current_slide -= 1
            self.draw_slide()

    def display_slide1(self, width, height):
        """Slide 1: Welcome screen with logo and start button."""
        self.place_logo(width, height)
        btn = tk.Button(self.root, text="Start",
                        font=("Helvetica", 30, "bold"), bg="#FFD700",
                        command=self.next_slide)
        self.canvas.create_window(width // 2, height - 100, window=btn)

    def open_bluetooth_settings(self):
        """Opens the system's Bluetooth settings."""
        try:
            if os.name == 'nt':  # Windows
                subprocess.run(["start", "ms-settings:bluetooth"], shell=True)
            elif os.name == 'posix':  # macOS/Linux
                if os.uname().sysname == "Darwin":  # macOS
                    subprocess.run(["open", "/System/Library/PreferencePanes/Bluetooth.prefPane"])
                else:  # Linux
                    subprocess.run(["bluetoothctl"])
        except Exception as e:
            messagebox.showerror("Error", f"Failed to open Bluetooth settings: {str(e)}")

    def display_slide2(self, width, height):
        """Slide 2: File send method selection screen with file and USB transfer options."""
        self.canvas.delete("all")
        self.draw_gradient(width, height, "#1A237E", "#64B5F6")

        # Title and instruction labels with updated design
        title = tk.Label(self.root, text="Send Your File", font=("Helvetica", 60, "bold"), bg="#1A237E", fg="white")
        self.canvas.create_window(width // 2, height * 0.1, window=title)
        instruction = tk.Label(self.root, text="Choose how you want to send your file", font=("Helvetica", 28), bg="#1A237E", fg="white")
        self.canvas.create_window(width // 2, height * 0.2, window=instruction)
        device_name = tk.Label(self.root, text="Device Name: INSTAPRINT", font=("Helvetica", 22, "bold"), bg="#1A237E", fg="#FFD700")
        self.canvas.create_window(width // 2, height * 0.3, window=device_name)

        # Left group: Sending methods ("Send Via:")
        left_x = width // 3
        group_y = height * 0.6
        send_via_label = tk.Label(self.root, text="Send Via:", font=("Helvetica", 36, "bold"), bg="#1A237E", fg="white")
        self.canvas.create_window(left_x, group_y - 150, window=send_via_label)
        bt_button = tk.Button(self.root, text="Bluetooth", font=("Helvetica", 24, "bold"), bg="#FFD700",
                              command=lambda: self.select_method("Bluetooth"))
        self.canvas.create_window(left_x, group_y - 50, window=bt_button, width=220, height=60)
        usb_button = tk.Button(self.root, text="USB", font=("Helvetica", 24, "bold"), bg="#FFD700",
                               command=lambda: self.select_method("USB"))
        self.canvas.create_window(left_x, group_y + 30, window=usb_button, width=220, height=60)

        # Right group: File selection ("Choose File:")
        right_x = (2 * width) // 3
        choose_file_label = tk.Label(self.root, text="Choose File:", font=("Helvetica", 36, "bold"), bg="#1A237E", fg="white")
        self.canvas.create_window(right_x, group_y - 150, window=choose_file_label)
        upload_button = tk.Button(self.root, text="Upload File", font=("Helvetica", 24, "bold"), bg="#FFD700",
                                  command=self.handle_file_upload)
        self.canvas.create_window(right_x, group_y - 50, window=upload_button, width=220, height=60)

        # Continue button (remains disabled until a file is chosen)
        self.continue_btn = tk.Button(self.root, text="Continue", font=("Helvetica", 24, "bold"), bg="#FFD700",
                                      state=tk.DISABLED, command=self.next_slide)
        self.canvas.create_window(width // 2, height - 80, window=self.continue_btn)

    def select_method(self, method):
        """Handles the selection of file sending method."""
        if method == "Bluetooth":
            self.open_bluetooth_settings()
        elif method == "USB":
            self.handle_usb_transfer()

    def display_slide3(self, width, height):
        """Slide 3: File confirmation screen."""
        self.canvas.delete("all")
        self.draw_gradient(width, height, "#1A237E", "#64B5F6")
        filename = os.path.basename(self.file_path) if self.file_path else "No file uploaded"
        color = "#FFD700" if self.file_path else "white"
        file_label = tk.Label(self.root, text="FILE CHOSEN:", font=("Helvetica", 70, "bold"), bg="#1A237E", fg=color)
        self.canvas.create_window(width // 2, height * 0.2, window=file_label)
        name_label = tk.Label(self.root, text=filename, font=("Helvetica", 40, "bold"), bg="#1A237E", fg="white")
        self.canvas.create_window(width // 2, height * 0.4, window=name_label)
        btn = tk.Button(self.root, text="Continue", font=("Helvetica", 24, "bold"), bg="#FFD700",
                        command=self.next_slide)
        self.canvas.create_window(width // 2, height - 80, window=btn)

    def display_slide4(self, width, height):
        """Slide 4: Paper settings screen with options for color, size, and print options."""
        self.canvas.delete("all")
        self.draw_gradient(width, height, "#1A237E", "#64B5F6")
        # COLOR selection
        color_label = tk.Label(self.root, text="COLOR:", font=("Helvetica", 48, "bold"), bg="#1A237E", fg="white")
        self.canvas.create_window(width // 2 - 350, height * 0.3, window=color_label, anchor=tk.W)
        color_options = [
            ("Black and White", "black_and_white", "₱2.00 per page"),
            ("Colored", "color", "₱3.00 per page")
        ]
        for i, (text, value, price) in enumerate(color_options):
            btn = tk.Radiobutton(self.root, text=f"{text}\n{price}",
                                 variable=self.color_var, value=value,
                                 font=("Helvetica", 24), bg="#1A237E", fg="white",
                                 selectcolor="#0099ff", indicatoron=0,
                                 width=15, height=2)
            self.canvas.create_window(width // 2 - 350, height * 0.3 + 80 + (i * 120),
                                      window=btn, anchor=tk.W)
        # SIZE selection
        size_label = tk.Label(self.root, text="SIZE:", font=("Helvetica", 48, "bold"), bg="#1A237E", fg="white")
        self.canvas.create_window(width // 2 + 50, height * 0.3, window=size_label, anchor=tk.W)
        size_options = [
            ("Short", "short", "₱1.00 per page"),
            ("Long", "long", "₱2.00 per page")
        ]
        for i, (text, value, price) in enumerate(size_options):
            btn = tk.Radiobutton(self.root, text=f"{text}\n{price}",
                                 variable=self.size_var, value=value,
                                 font=("Helvetica", 24), bg="#1A237E", fg="white",
                                 selectcolor="#0099ff", indicatoron=0,
                                 width=15, height=2)
            self.canvas.create_window(width // 2 + 50, height * 0.3 + 80 + (i * 120),
                                      window=btn, anchor=tk.W)
        # PRINT OPTIONS
        print_label = tk.Label(self.root, text="PRINT OPTIONS:", font=("Helvetica", 48, "bold"), bg="#1A237E", fg="white")
        self.canvas.create_window(width // 2, height - 500, window=print_label)
        print_options = [
            ("Print Whole File", "whole_file"),
            ("Specify Copies", "copies")
        ]
        for i, (text, value) in enumerate(print_options):
            btn = tk.Radiobutton(self.root, text=text,
                                 variable=self.print_option_var, value=value,
                                 font=("Helvetica", 24), bg="#1A237E", fg="white",
                                 selectcolor="#0099ff", indicatoron=0,
                                 width=15, height=2,
                                 command=self.toggle_copies_field)
            self.canvas.create_window(width // 2 - 150 + (i * 300), height - 400,
                                      window=btn, anchor=tk.CENTER)
        self.copies_entry = tk.Entry(self.root, textvariable=self.copies_var,
                                     font=("Helvetica", 24), width=5, state=tk.DISABLED)
        self.canvas.create_window(width // 2, height - 300, window=self.copies_entry)
        btn = tk.Button(self.root, text="Proceed to Payment",
                        font=("Helvetica", 24, "bold"), bg="#FFD700",
                        command=self.next_slide)
        self.canvas.create_window(width // 2 + 150, height - 100, window=btn)
        back_btn = tk.Button(self.root, text="Back",
                             font=("Helvetica", 24, "bold"), bg="#FFD700",
                             command=self.previous_slide)
        self.canvas.create_window(width // 2 - 150, height - 100, window=back_btn)

    def toggle_copies_field(self):
        """Enables/disables the copies input field based on print option selection."""
        if self.print_option_var.get() == "copies":
            self.copies_entry.config(state=tk.NORMAL)
        else:
            self.copies_entry.config(state=tk.DISABLED)
            self.copies_var.set("1")

    def display_slide5(self, width, height):
        """Slide 5: Payment summary screen showing details in a table format."""
        self.canvas.delete("all")
        self.draw_gradient(width, height, "#1A237E", "#64B5F6")
        total_cost = self.calculate_cost()
        page_count = self.get_page_count()
        copies = int(self.copies_var.get()) if self.print_option_var.get() == "copies" else 1

        # Create table using ttk.Treeview to display summary details
        table = ttk.Treeview(self.root, columns=("Setting", "Value"), show="headings", height=8)
        table.heading("Setting", text="Setting", anchor=tk.CENTER)
        table.heading("Value", text="Value", anchor=tk.CENTER)
        table.column("Setting", width=400, anchor=tk.CENTER)
        table.column("Value", width=400, anchor=tk.CENTER)
        style = ttk.Style()
        style.configure("Treeview", font=("Helvetica", 20), rowheight=40, background="#1A237E", foreground="white")
        style.configure("Treeview.Heading", font=("Helvetica", 25, "bold"), background="#64B5F6", foreground="black")
        style.map("Treeview", background=[("selected", "#64B5F6")])
        table.insert("", "end", values=("File", os.path.basename(self.file_path) if self.file_path else "None"))
        table.insert("", "end", values=("Size", f"{self.size_var.get().capitalize()} (₱{self.prices['size'][self.size_var.get()]:.2f})"))
        table.insert("", "end", values=("Color", f"{self.color_var.get().replace('_', ' ').title()} (₱{self.prices['color'][self.color_var.get()]:.2f})"))
        table.insert("", "end", values=("Print Option", "Copies" if self.print_option_var.get() == "copies" else "Whole File"))
        table.insert("", "end", values=("Pages per Copy", page_count))
        table.insert("", "end", values=("Total Copies", copies))
        table.insert("", "end", values=("Total Pages", page_count * copies))
        table.insert("", "end", values=("Total Cost", f"₱{total_cost:.2f}"))
        self.canvas.create_window(width // 2, height // 2 - 50, window=table)
        btn = tk.Button(self.root, text="Confirm Payment",
                        font=("Helvetica", 24, "bold"), bg="#FFD700",
                        command=self.next_slide)
        self.canvas.create_window(width // 2 + 150, height - 100, window=btn)
        back_btn = tk.Button(self.root, text="Back",
                             font=("Helvetica", 24, "bold"), bg="#FFD700",
                             command=self.previous_slide)
        self.canvas.create_window(width // 2 - 150, height - 100, window=back_btn)

    def load_image_slide2(self, image_path, size=(300, 300)):
        """Loads an image (for example, to display on slide 2 for Bluetooth transfer) with the specified size."""
        return ImageTk.PhotoImage(Image.open(image_path).resize(size))

    def get_page_count(self):
        """Counts the number of pages in a PDF file if applicable."""
        if self.file_path and self.file_path.endswith(".pdf"):
            from PyPDF2 import PdfReader
            with open(self.file_path, "rb") as f:
                return len(PdfReader(f).pages)
        return 1

    def handle_file_upload(self):
        """Handles file upload after a sending method is selected."""
        upload_folder = "C:\\INSTAPRINTMACHINE"
        if not os.path.exists(upload_folder):
            os.makedirs(upload_folder)
        self.file_path = filedialog.askopenfilename(
            title="Select a file to upload",
            initialdir=upload_folder
        )
        if self.file_path:
            messagebox.showinfo("Success", "File uploaded successfully!")
            self.current_slide = 3
            if hasattr(self, 'continue_btn'):
                self.continue_btn.config(state=tk.NORMAL)

    def handle_usb_transfer(self):
        """Handles file transfer via USB cable."""
        if not self.file_path:
            messagebox.showerror("Error", "No file selected for transfer!")
            return
        partitions = psutil.disk_partitions(all=False)
        usb_drives = []
        for p in partitions:
            if 'removable' in p.opts.lower():
                usb_drives.append(p.device)
        if not usb_drives:
            messagebox.showerror("USB Transfer", "No removable USB drive detected!")
            return
        drive = usb_drives[0]
        try:
            dest_path = os.path.join(drive, os.path.basename(self.file_path))
            shutil.copy(self.file_path, dest_path)
            messagebox.showinfo("USB Transfer", f"File transferred successfully to {dest_path}!")
            self.current_slide = 3
            self.draw_slide()
        except Exception as e:
            messagebox.showerror("USB Transfer", f"Failed to transfer file: {e}")

    def place_logo(self, width, height):
        """Positions the circular logo at the center of Slide 1."""
        self.canvas.create_image(width // 2, height // 2 - 50,
                                 image=self.logo_tk, anchor=tk.CENTER)

    def calculate_cost(self):
        """Calculates the total cost based on user selections."""
        try:
            pages = self.get_page_count()
            copies = int(self.copies_var.get()) if self.print_option_var.get() == "copies" else 1
            size_price = self.prices['size'][self.size_var.get()]
            color_price = self.prices['color'][self.color_var.get()]
            return (size_price + color_price) * pages * copies
        except:
            return 0.00

if __name__ == "__main__":
    root = tk.Tk()
    app = GradientApp(root)
    root.mainloop()
