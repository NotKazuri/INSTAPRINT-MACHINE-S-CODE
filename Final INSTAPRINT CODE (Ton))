import tkinter as tk
from tkinter import filedialog, messagebox, Canvas, Button, PhotoImage, ttk
from pathlib import Path
import os
import subprocess
from PyPDF2 import PdfReader
import win32api
import win32print
import win32con
import serial
import time
from PIL import Image, ImageTk


# ----- Helper for asset paths -----
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = Path(r"C:\InstaPrint Machine\build\assets")  # Change as needed


def relative_to_assets(frame: str, path: str) -> str:
    """
    Returns the full path (as string) for the given asset in the specified frame folder.
    """
    return str(ASSETS_PATH / frame / Path(path))


# ----- Original Backend Function: Set Printer Color -----
def set_printer_color(printer_name, color_choice):
    hPrinter = None
    try:
        hPrinter = win32print.OpenPrinter(printer_name)
        properties = win32print.GetPrinter(hPrinter, 2)
        devmode = properties["pDevMode"]
        if hasattr(devmode, "dmFields"):
            devmode.dmFields |= win32con.DM_COLOR
        else:
            print("dmFields attribute not found; proceeding without updating dmFields.")
        if color_choice == "Black and White":
            devmode.dmColor = 1  # Black and White
        else:
            devmode.dmColor = 2  # Colored
        win32print.DocumentProperties(None, hPrinter, printer_name, devmode, devmode, win32print.DM_IN_BUFFER | win32print.DM_OUT_BUFFER)
    except Exception as e:
        print("Error setting printer color:", e)
    finally:
        if hPrinter:
            win32print.ClosePrinter(hPrinter)


# ----- Utility: Draw Shadowed Text -----
def create_shadowed_text(canvas, x, y, text, font, text_color, shadow_color, offset=(2,2)):
    canvas.create_text(x + offset[0], y + offset[1], text=text, font=font, fill=shadow_color)
    canvas.create_text(x, y, text=text, font=font, fill=text_color)


# ----- Main Application Class -----
class InstaPrintApp:
    def __init__(self, root):
        self.root = root
        self.root.title("InstaPrint Machine")


        # Retrieve current screen resolution
        self.screen_width = self.root.winfo_screenwidth()
        self.screen_height = self.root.winfo_screenheight()
        self.root.geometry(f"{self.screen_width}x{self.screen_height}")
        self.root.configure(bg="#FFFFFF")
        self.root.attributes('-fullscreen', True)
        self.root.resizable(False, False)


        # Calculate scaling factors based on design resolution (1920x1080)
        design_width = 1920
        design_height = 1080
        self.scale_x = self.screen_width / design_width
        self.scale_y = self.screen_height / design_height


        # Helper to scale coordinates
        def scale(x, y):
            return (x * self.scale_x, y * self.scale_y)
        self.scale = scale


        # Slide control:
        # 0 = Frame 0 (Introduction)
        # 1 = Frame 1 (File Sending)
        # 2 = Frame 2 (File Confirmation)
        # 3 = Frame 3 (Paper Selection)
        # 4 = Frame 4 (Summary Table)
        # 5 = Frame 5 (Goodbye Screen)
        self.current_slide = 0


        # Shared variables for file selection and printing settings
        self.file_path = None
        self.selected_size = None       # "Short" or "Long"
        self.selected_color = None      # "Black and White" or "Colored"
        self.selected_copies = None     # "One Copy" or "Multiple Copies"
        self.paper_size_cost = 0
        self.paper_color_cost = 0
        self.image_refs = []  # To hold image references


        # Persistent spinbox for "Multiple Copies" (hidden initially)
        self.copies_spinbox = tk.Spinbox(self.root, from_=1, to=5, font=("Tahoma", int(20 * self.scale_y)))
        self.copies_spinbox.place_forget()


        # Dictionaries to hold buttons with enlarge functionality for paper size, color, and copies.
        self.paper_size_buttons = {}
        self.paper_color_buttons = {}
        self.copies_buttons = {}


        # Arduino (Coin Slot) variables and serial connection
        self.arduino_balance = 0.0
        self.ser = None
        self.init_serial_connection()
        self.read_serial()  # Start polling serial data


        # Create main canvas for UI using dynamic screen dimensions
        self.canvas = Canvas(root, bg="#FFFFFF", height=self.screen_height, width=self.screen_width,
                             bd=0, highlightthickness=0, relief="ridge")
        self.canvas.pack(fill=tk.BOTH, expand=True)


        # Load logo (if available)
        self.logo_path = "INSTAPRINT MAIN LOGO.png"
        try:
            self.logo_tk = self.create_logo(self.logo_path, size=int(700 * self.scale_x))
        except Exception as e:
            print(f"Error loading logo: {e}")
            self.logo_tk = None


        # Draw the current slide
        self.draw_slide()


        # Bind Escape key to exit fullscreen/close the window
        self.root.bind("<Escape>", lambda e: self.root.destroy())


    # ----- Arduino Serial Connection -----
    def init_serial_connection(self):
        try:
            self.ser = serial.Serial('COM3', 9600, timeout=1)
            time.sleep(2)
            print("Serial connection established at 9600 baud.")
        except Exception as e:
            messagebox.showerror("Serial Error", f"Failed to open serial port: {e}")
            self.ser = None


    def read_serial(self):
        if self.ser is not None:
            try:
                if self.ser.in_waiting:
                    line = self.ser.readline().decode('utf-8', errors='ignore').strip()
                    print("Serial read:", line)
                    if line.startswith("Total Balance:"):
                        parts = line.split()
                        if len(parts) >= 3:
                            try:
                                self.arduino_balance = float(parts[2])
                                self.update_payment()
                            except ValueError:
                                print("Error parsing coin amount")
            except Exception as e:
                print("Serial read error:", e)
        self.root.after(500, self.read_serial)


    def update_payment(self):
        total_cost = self.calculate_cost()
        print(f"Calculated Total Cost: ₱{total_cost:.2f} (Pages: {self.get_page_count()}, Size Cost: {self.paper_size_cost}, Color Cost: {self.paper_color_cost}, Arduino Balance: ₱{self.arduino_balance:.2f})")
        if self.current_slide == 4:
            self.draw_slide()


    # ----- Helper to Reset the Arduino's Coin Counter -----
    def reset_arduino(self):
        """Toggle the DTR line to force a hardware reset and clear any leftover serial data.
        Also reset the internal coin balance."""
        if self.ser is not None:
            try:
                # Flush buffers first
                self.ser.reset_input_buffer()
                self.ser.reset_output_buffer()
                # Toggle DTR to reset the Arduino (if supported)
                self.ser.setDTR(False)
                time.sleep(0.1)
                self.ser.setDTR(True)
                print("Arduino reset via DTR toggle.")
            except Exception as e:
                print("Error resetting Arduino via DTR:", e)
        self.arduino_balance = 0.0


    # ----- Ghostscript PDF Grayscale Conversion -----
    def convert_pdf_to_grayscale(self, input_pdf):
        gray_file = os.path.splitext(input_pdf)[0] + "_grayscale.pdf"
        gs_command = [
            "C:/InstaPrint Machine/gs10.05.0/bin/gswin64c.exe",
            "-sDEVICE=pdfwrite",
            "-dCompatibilityLevel=1.4",
            "-dPDFSETTINGS=/prepress",
            "-dColorConversionStrategy=/Gray",
            "-dProcessColorModel=/DeviceGray",
            "-dNOPAUSE",
            "-dBATCH",
            f"-sOutputFile={gray_file}",
            input_pdf
        ]
        try:
            subprocess.run(gs_command, check=True)
            print(f"Converted {input_pdf} to grayscale successfully as {gray_file}.")
            return gray_file
        except subprocess.CalledProcessError as e:
            print("Error converting PDF to grayscale:", e)
            return input_pdf


    # ----- Paper Color Selection (with conversion for black and white) -----
    def select_paper_color(self, color, cost):
        self.selected_color = color
        self.paper_color_cost = cost
        # Update button images for paper color
        for key, data in self.paper_color_buttons.items():
            btn = data["button"]
            if key == color:
                btn.config(image=data["selected_img"])
            else:
                btn.config(image=data["normal_img"])
        print(f"Selected Paper Color: {color} - Cost: {cost} peso(s)")


        if color == "Black and White" and self.file_path and self.file_path.lower().endswith(".pdf"):
            self.file_path = self.convert_pdf_to_grayscale(self.file_path)


    # ----- Helper Function: Create Logo -----
    def create_logo(self, image_path, size=400):
        img = Image.open(image_path).convert("RGBA").resize((size, size), Image.LANCZOS)
        return ImageTk.PhotoImage(img)


    # ----- Helper Functions for Cost Calculation -----
    def get_page_count(self):
        if self.file_path and self.file_path.lower().endswith(".pdf"):
            try:
                with open(self.file_path, "rb") as f:
                    reader = PdfReader(f)
                    return len(reader.pages)
            except Exception as e:
                print("PDF error:", e)
                return 1
        return 1


    def calculate_cost(self):
        page_count = self.get_page_count()
        if self.selected_copies == "Multiple Copies":
            try:
                copies = int(self.copies_spinbox.get())
            except Exception as e:
                print("Error getting spinbox value:", e)
                copies = 1
        elif self.selected_copies == "One Copy":
            copies = 1
        else:
            copies = 1
        total = (self.paper_size_cost + self.paper_color_cost) * page_count * copies
        return total


    # ----- Cleanup: Delete files in the designated folder (if needed) -----
    def cleanup_folder(self):
        if self.file_path:
            folder = r"C:\Instaprint files"  # Change as appropriate
            try:
                for filename in os.listdir(folder):
                    file_path = os.path.join(folder, filename)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                print(f"Cleaned up folder: {folder}")
            except Exception as e:
                print(f"Error cleaning up folder: {e}")


    # ----- Drawing Slides -----
    def draw_slide(self, event=None):
        self.canvas.delete("all")
        self.image_refs = []  # Reset image references
        if self.current_slide == 0:
            self.display_intro_slide()
        elif self.current_slide == 1:
            self.display_file_sending_slide()
        elif self.current_slide == 2:
            self.display_file_confirmation_slide()
        elif self.current_slide == 3:
            self.display_paper_selection_slide()
        elif self.current_slide == 4:
            self.display_summary_table()
        elif self.current_slide == 5:
            self.display_goodbye_screen()
        self.canvas.update_idletasks()


    def next_slide(self):
        if self.current_slide == 1 and self.file_path is None:
            messagebox.showwarning("No File Selected", "Please select a file before continuing.")
            return
        if self.current_slide == 3:
            if not self.selected_size or not self.selected_color or not self.selected_copies:
                messagebox.showwarning("Incomplete Selection", "Please select paper size, color, and copies before continuing.")
                return
            self.copies_spinbox.place_forget()
        self.current_slide += 1
        self.draw_slide()


    def previous_slide(self):
        if self.current_slide > 0:
            self.current_slide -= 1
            self.draw_slide()


    def restart_application(self):
        # Reset Arduino by toggling DTR and clearing buffers, then clear our internal balance.
        if self.ser:
            try:
                self.ser.reset_input_buffer()
                self.ser.reset_output_buffer()
                self.ser.setDTR(False)
                time.sleep(0.1)
                self.ser.setDTR(True)
                print("Arduino reset in restart_application.")
            except Exception as e:
                print("Error resetting buffers in restart_application:", e)
        self.cleanup_folder()
        self.file_path = None
        self.selected_size = None
        self.selected_color = None
        self.selected_copies = None
        self.paper_size_cost = 0
        self.paper_color_cost = 0
        self.copies_spinbox.place_forget()
        # Also reset the Arduino coin balance
        self.reset_arduino()
        self.current_slide = 0
        self.draw_slide()


    # ----- Execute Print Job Based on Paper Size -----
    def execute_print_job(self):
        if self.selected_size and self.selected_size.lower() == "short":
            printer_name = "EPSON L120 Series"
        elif self.selected_size and self.selected_size.lower() == "long":
            printer_name = "Canon MP280 series Printer (Copy 1)"
        else:
            printer_name = "EPSON L120 Series"
        set_printer_color(printer_name, self.selected_color)
        try:
            win32print.SetDefaultPrinter(printer_name)
            if self.selected_copies == "Multiple Copies":
                copies = int(self.copies_spinbox.get())
            else:
                copies = 1
            for i in range(copies):
                win32api.ShellExecute(0, "print", self.file_path, None, ".", 0)
        except Exception as e:
            messagebox.showerror("Printing Error", f"Failed to print document: {e}")


    def handle_print_and_next(self):
        self.execute_print_job()
        # After printing, assume the transaction is complete.
        # Reset the Arduino so that coin balance is cleared.
        self.reset_arduino()
        self.current_slide = 5
        self.draw_slide()


    # ------------------ Frame 0: Introduction Slide ------------------
    def display_intro_slide(self):
        self.canvas.configure(bg="#FFFFFF")
        try:
            img = PhotoImage(file=relative_to_assets("frame0", "frame0_image_1.png"))
            x, y = self.scale(960, 540)
            self.canvas.create_image(x, y, image=img)
            self.image_refs.append(img)
        except Exception as e:
            print(f"Error loading frame0_image_1.png: {e}")
        try:
            img = Image.open(relative_to_assets("frame0", "frame0_image_2.png"))
            new_size = (int(900 * self.scale_x), int(900 * self.scale_y))
            img = img.resize(new_size, Image.LANCZOS)
            img = ImageTk.PhotoImage(img)
            x, y = self.scale(960, 500)
            self.canvas.create_image(x, y, image=img)
            self.image_refs.append(img)
        except Exception as e:
            print(f"Error loading frame0_image_2.png: {e}")
        try:
            btn_img = PhotoImage(file=relative_to_assets("frame0", "frame0_button_1.png"))
            continue_btn = Button(self.root, image=btn_img, borderwidth=0, highlightthickness=0, command=self.next_slide, relief="flat")
            x, y = self.scale(960, 890)
            self.canvas.create_window(x, y, window=continue_btn, width=int(327 * self.scale_x), height=int(82 * self.scale_y))
            self.image_refs.append(btn_img)
        except Exception as e:
            print(f"Error loading frame0_button_1.png: {e}")


    # ------------------ Frame 1: File Sending Slide ------------------
    def display_file_sending_slide(self):
        self.canvas.configure(bg="#FFFFFF")
        images = [
            ("frame1_image_1.png", (960, 540)),
            ("frame1_image_2.png", (960, 540)),
            ("frame1_image_3.png", (960, 180)),
            ("frame1_image_4.png", (960, 180)),
            ("frame1_image_5.png", (1366, 449)),
            ("frame1_image_6.png", (589, 449)),
            ("frame1_image_7.png", (85, 1000)),
            ("frame1_image_8.png", (963, 320))
        ]
        for img_name, pos in images:
            try:
                img = PhotoImage(file=relative_to_assets("frame1", img_name))
                x, y = self.scale(*pos)
                self.canvas.create_image(x, y, image=img)
                self.image_refs.append(img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")
        buttons = [
            ("frame1_button_1.png", (590, 685), self.handle_usb_transfer),
            ("frame1_button_2.png", (590, 570), self.handle_bluetooth),
            ("frame1_button_3.png", (960, 830), self.next_slide),
            ("frame1_button_4.png", (1370, 610), self.select_file)
        ]
        for img_name, pos, command in buttons:
            try:
                btn_img = PhotoImage(file=relative_to_assets("frame1", img_name))
                btn = Button(self.root, image=btn_img, borderwidth=0, highlightthickness=0, command=command, relief="flat")
                x, y = self.scale(*pos)
                self.canvas.create_window(x, y, window=btn)
                self.image_refs.append(btn_img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")


    # ------------------ Frame 2: File Confirmation Slide ------------------
    def display_file_confirmation_slide(self):
        self.canvas.configure(bg="#FFFFFF")
        images = [
            ("frame2_image_1.png", (960, 540)),
            ("frame2_image_2.png", (85, 1000)),
            ("frame2_image_3.png", (960, 540)),
            ("frame2_image_4.png", (960, 205)),
            ("frame2_image_5.png", (960, 200))
        ]
        for img_name, pos in images:
            try:
                img = PhotoImage(file=relative_to_assets("frame2", img_name))
                x, y = self.scale(*pos)
                self.canvas.create_image(x, y, image=img)
                self.image_refs.append(img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")
        file_name = os.path.basename(self.file_path) if self.file_path else "No file selected"
        x, y = self.scale(960, 500)
        self.canvas.create_text(x, y, text=f"{file_name}", font=("Tahoma", int(40 * self.scale_y), "bold"), fill="black")
        buttons = [
            ("frame2_button_1.png", (1220, 800), self.next_slide),
            ("frame2_button_2.png", (750, 800), self.previous_slide)
        ]
        for img_name, pos, command in buttons:
            try:
                btn_img = PhotoImage(file=relative_to_assets("frame2", img_name))
                btn = Button(self.root, image=btn_img, borderwidth=0, highlightthickness=0, command=command, relief="flat")
                x, y = self.scale(*pos)
                self.canvas.create_window(x, y, window=btn)
                self.image_refs.append(btn_img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")


    # ------------------ Frame 3: Paper Selection Slide ------------------
    def get_enlarged_image(self, path, factor):
        try:
            img = Image.open(path)
            width, height = img.size
            new_size = (int(width * factor), int(height * factor))
            img = img.resize(new_size, Image.LANCZOS)
            return ImageTk.PhotoImage(img)
        except Exception as e:
            print(f"Error enlarging image: {e}")
            return None


    def display_paper_selection_slide(self):
        self.canvas.configure(bg="#FFFFFF")
        images = [
            ("frame3_image_1.png", (960, 540)),
            ("frame3_image_2.png", (960, 540)),
            ("frame3_image_3.png", (85, 1000)),
            ("frame3_image_4.png", (1341, 334)),
            ("frame3_image_5.png", (960, 701)),
            ("frame3_image_6.png", (544, 334)),
            ("frame3_image_7.png", (960, 166)),
            ("frame3_image_8.png", (960, 164)),
            ("frame3_image_9.png", (960, 701)),
            ("frame3_image_10.png", (544, 331)),
            ("frame3_image_11.png", (1348, 332)),
            ("frame3_image_12.png", (985, 1030))
        ]
        for img_name, pos in images:
            try:
                img = PhotoImage(file=relative_to_assets("frame3", img_name))
                x, y = self.scale(*pos)
                self.canvas.create_image(x, y, image=img)
                self.image_refs.append(img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")


        # Create paper size buttons with enlarge functionality
        self.paper_size_buttons = {}
        paper_size_buttons_data = [
            ("frame3_button_1.png", (1340, 460), "Short", 1),
            ("frame3_button_6.png", (1340, 600), "Long", 2)
        ]
        for img_name, pos, size, cost in paper_size_buttons_data:
            try:
                img_path = relative_to_assets("frame3", img_name)
                normal_img = PhotoImage(file=img_path)
                selected_img = self.get_enlarged_image(img_path, 1.2)  # 20% larger
                btn = Button(self.root, image=normal_img, borderwidth=0, highlightthickness=0, command=lambda s=size, c=cost: self.select_paper_size(s, c), relief="flat")
                self.paper_size_buttons[size] = {
                    "button": btn,
                    "normal_img": normal_img,
                    "selected_img": selected_img,
                    "pos": pos
                }
                x, y = self.scale(*pos)
                self.canvas.create_window(x, y, window=btn)
                self.image_refs.append(normal_img)
                self.image_refs.append(selected_img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")


        # Create paper color buttons with enlarge functionality
        self.paper_color_buttons = {}
        paper_color_buttons_data = [
            ("frame3_button_2.png", (550, 460), "Black and White", 2),
            ("frame3_button_3.png", (550, 600), "Colored", 3)
        ]
        for img_name, pos, color, cost in paper_color_buttons_data:
            try:
                img_path = relative_to_assets("frame3", img_name)
                normal_img = PhotoImage(file=img_path)
                selected_img = self.get_enlarged_image(img_path, 1.2)
                btn = Button(self.root, image=normal_img, borderwidth=0, highlightthickness=0, command=lambda col=color, c=cost: self.select_paper_color(col, c), relief="flat")
                self.paper_color_buttons[color] = {
                    "button": btn,
                    "normal_img": normal_img,
                    "selected_img": selected_img,
                    "pos": pos
                }
                x, y = self.scale(*pos)
                self.canvas.create_window(x, y, window=btn)
                self.image_refs.append(normal_img)
                self.image_refs.append(selected_img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")


        # Create copies option buttons with enlarge functionality
        self.copies_buttons = {}
        copies_buttons_data = [
            ("frame3_button_4.png", (775, 815), "One Copy", None),
            ("frame3_button_5.png", (1150, 812), "Multiple Copies", None)
        ]
        for img_name, pos, option, _ in copies_buttons_data:
            try:
                img_path = relative_to_assets("frame3", img_name)
                normal_img = PhotoImage(file=img_path)
                selected_img = self.get_enlarged_image(img_path, 1.2)
                btn = Button(self.root, image=normal_img, borderwidth=0, highlightthickness=0, command=lambda opt=option: self.select_copies(opt), relief="flat")
                self.copies_buttons[option] = {
                    "button": btn,
                    "normal_img": normal_img,
                    "selected_img": selected_img,
                    "pos": pos
                }
                x, y = self.scale(*pos)
                self.canvas.create_window(x, y, window=btn)
                self.image_refs.append(normal_img)
                self.image_refs.append(selected_img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")


        # For the "Multiple Copies" option, also show the spinbox
        if self.selected_copies == "Multiple Copies":
            try:
                x, y = self.scale(928, 875)
                self.copies_spinbox.place(x=x, y=y, width=int(80 * self.scale_x), height=int(50 * self.scale_y))
                self.copies_spinbox.lift()
                self.root.update_idletasks()
                self.root.update()
            except Exception as e:
                print(f"Error updating spinbox position: {e}")
        else:
            self.copies_spinbox.place_forget()


        # Create navigation buttons (continue and back) for frame3
        nav_buttons = [
            ("frame3_button_7.png", (1580, 875), self.next_slide),
            ("frame3_button_8.png", (340, 875), self.previous_slide)
        ]
        for img_name, pos, command in nav_buttons:
            try:
                btn_img = PhotoImage(file=relative_to_assets("frame3", img_name))
                btn = Button(self.root, image=btn_img, borderwidth=0, highlightthickness=0, command=command, relief="flat")
                x, y = self.scale(*pos)
                self.canvas.create_window(x, y, window=btn)
                self.image_refs.append(btn_img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")


    def select_paper_size(self, size, cost):
        self.selected_size = size
        self.paper_size_cost = cost
        # Update button images: enlarge the selected button and revert others.
        for s, data in self.paper_size_buttons.items():
            btn = data["button"]
            if s == size:
                btn.config(image=data["selected_img"])
            else:
                btn.config(image=data["normal_img"])
        print(f"Selected Paper Size: {size} - Cost: {cost} peso(s)")


    def select_copies(self, option):
        self.selected_copies = option
        # Update copies buttons appearance
        for opt, data in self.copies_buttons.items():
            btn = data["button"]
            if opt == option:
                btn.config(image=data["selected_img"])
            else:
                btn.config(image=data["normal_img"])
        print(f"Selected Copies: {option}")
        if option == "Multiple Copies":
            x, y = self.scale(928, 875)
            self.copies_spinbox.place(x=x, y=y, width=int(80 * self.scale_x), height=int(50 * self.scale_y))
            self.copies_spinbox.lift()
            self.root.update_idletasks()
            self.root.update()
        else:
            self.copies_spinbox.place_forget()


    # ------------------ Frame 4: Summary Table (and Print) ------------------
    def display_summary_table(self):
        self.canvas.configure(bg="#FFFFFF")
        total_cost = self.calculate_cost()
        net_cost = max(0, total_cost - self.arduino_balance)
        try:
            img = PhotoImage(file=relative_to_assets("frame4", "frame4_image_1.png"))
            x, y = self.scale(960, 540)
            self.canvas.create_image(x, y, image=img)
            self.image_refs.append(img)
            img = PhotoImage(file=relative_to_assets("frame4", "frame4_image_3.png"))
            x, y = self.scale(960, 160)
            self.canvas.create_image(x, y, image=img)
            self.image_refs.append(img)
        except Exception as e:
            print(f"Error loading frame4_image_1.png: {e}")
        summary_table = ttk.Treeview(self.root, columns=("SETTINGS", "DETAILS"), show="headings", height=5)
        summary_table.heading("SETTINGS", text="SETTINGS", anchor=tk.CENTER)
        summary_table.heading("DETAILS", text="DETAILS", anchor=tk.CENTER)
        summary_table.column("SETTINGS", width=int(400 * self.scale_x), anchor=tk.CENTER)
        summary_table.column("DETAILS", width=int(400 * self.scale_x), anchor=tk.CENTER)
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("Treeview", font=("Tahoma", int(20 * self.scale_y)), rowheight=int(65 * self.scale_y), background="#0d084d", foreground="white")
        style.configure("Treeview.Heading", font=("Tahoma", int(25 * self.scale_y), "bold"), background="#0099ff", foreground="white")
        style.map("Treeview", background=[("selected", "#0d084d")])
        summary_table.insert("", "end", values=("FILE", os.path.basename(self.file_path) if self.file_path else "No file selected"))
        summary_table.insert("", "end", values=("SIZE", self.selected_size if self.selected_size else "Not selected"))
        summary_table.insert("", "end", values=("COLOR", self.selected_color if self.selected_color else "Not selected"))
        if self.selected_copies == "Multiple Copies":
            try:
                copies_value = int(self.copies_spinbox.get())
            except:
                copies_value = "Not selected"
        elif self.selected_copies == "One Copy":
            copies_value = 1
        else:
            copies_value = self.selected_copies if self.selected_copies else "Not selected"
        summary_table.insert("", "end", values=("NUMBER OF COPIES", copies_value))
        summary_table.insert("", "end", values=("TOTAL PAGES", self.get_page_count() * (copies_value if isinstance(copies_value, int) else 1)))
        x, y = self.scale(960, 420)
        self.canvas.create_window(x, y, window=summary_table)
        amount_table = ttk.Treeview(self.root, columns=("Amount",), show="headings", height=1)
        amount_table.heading("Amount", text="AMOUNT TO BE PAID", anchor=tk.CENTER)
        amount_table.column("Amount", width=int(800 * self.scale_x), anchor=tk.CENTER)
        amount_table.insert("", "end", values=(f"₱{net_cost:.2f}",))
        x, y = self.scale(960, 690)
        self.canvas.create_window(x, y, window=amount_table)
        if net_cost == 0:
            try:
                btn_img = PhotoImage(file=relative_to_assets("frame4", "frame4_button_2(second).png"))
                print_btn = Button(self.root, image=btn_img, borderwidth=0, highlightthickness=0, command=self.handle_print_and_next, relief="flat")
                x, y = self.scale(960, 861)
                self.canvas.create_window(x, y, window=print_btn, width=int(323 * self.scale_x), height=int(114 * self.scale_y))
                self.image_refs.append(btn_img)
            except Exception as e:
                print(f"Error loading frame4_button_2(second).png: {e}")


    # ------------------ Frame 5: Goodbye Screen ------------------
    def display_goodbye_screen(self):
        self.canvas.configure(bg="#FFFFFF")
        try:
            img = PhotoImage(file=relative_to_assets("frame5", "frame5_image_1.png"))
            x, y = self.scale(960, 540)
            self.canvas.create_image(x, y, image=img)
            self.image_refs.append(img)
        except Exception as e:
            print(f"Error loading frame5_image_1.png: {e}")
        images = [
            ("frame5_image_2.png", (959, 423)),
            ("frame5_image_3.png", (960, 702)),
            ("frame5_image_4.png", (959, 787))
        ]
        for img_name, pos in images:
            try:
                img = PhotoImage(file=relative_to_assets("frame5", img_name))
                x, y = self.scale(*pos)
                self.canvas.create_image(x, y, image=img)
                self.image_refs.append(img)
            except Exception as e:
                print(f"Error loading {img_name}: {e}")
        try:
            btn_img = PhotoImage(file=relative_to_assets("frame5", "frame5_button_1.png"))
            restart_btn = Button(self.root, image=btn_img, borderwidth=0, highlightthickness=0, command=self.restart_application, relief="flat")
            x, y = self.scale(960, 920)
            self.canvas.create_window(x, y, window=restart_btn, width=int(324 * self.scale_x), height=int(117 * self.scale_y))
            self.image_refs.append(btn_img)
        except Exception as e:
            print(f"Error loading frame5_button_1: {e}")


    # ------------------ File Selection Function ------------------
    def select_file(self):
        custom_folder = r"C:\INSTAPRINTMACHINE"  # Change as needed
        top = tk.Toplevel(self.root)
        top.title("Confirm")
        top.geometry("600x400")
        top.resizable(False, False)
        top.update_idletasks()
        width = top.winfo_width()
        height = top.winfo_height()
        x = (top.winfo_screenwidth() // 2) - (width // 2)
        y = (top.winfo_screenheight() // 2) - (height // 2)
        top.geometry(f"600x400+{x}+{y}")
        frame = tk.Frame(top)
        frame.pack(fill="both", expand=True, padx=10, pady=10)
        scrollbar = tk.Scrollbar(frame)
        scrollbar.pack(side="right", fill="y")
        listbox = tk.Listbox(frame, font=("Tahoma", int(16 * self.scale_y)), yscrollcommand=scrollbar.set)
        listbox.pack(side="left", fill="both", expand=True)
        scrollbar.config(command=listbox.yview)
        try:
            allowed_exts = ('.pdf', '.docx', '.doc')
            files = [f for f in os.listdir(custom_folder) if os.path.isfile(os.path.join(custom_folder, f)) and f.lower().endswith(allowed_exts)]
            print("Files found:", files)
            if not files:
                messagebox.showinfo("No Files", "No files detected, please send a file first.")
                top.destroy()
                return
            for f in files:
                listbox.insert(tk.END, f)
        except Exception as e:
            messagebox.showerror("Error", f"Could not access folder:\n{e}")
            top.destroy()
            return
        def on_select():
            selected = listbox.curselection()
            if selected:
                file_name = listbox.get(selected[0])
                full_path = os.path.join(custom_folder, file_name)
                self.file_path = full_path
                print(f"File selected: {full_path}")
                top.destroy()
            else:
                messagebox.showwarning("No Selection", "Please select a file.")
        select_btn = tk.Button(top, text="Select File", font=("Tahoma", int(16 * self.scale_y)), command=on_select)
        select_btn.pack(pady=10)
        top.grab_set()


    # ------------------ USB Transfer Function ------------------
    def handle_usb_transfer(self):
        messagebox.showinfo("USB Transfer", "Please insert a USB")
        self.usb_dialog_opened = False
        self.poll_for_usb()


    def poll_for_usb(self):
        import psutil
        usb_drives = []
        for p in psutil.disk_partitions(all=False):
            if 'removable' in p.opts.lower():
                usb_drives.append(p.device)
        if usb_drives:
            drive = usb_drives[0]
            if not drive.endswith("\\"):
                drive += "\\"
            if not os.path.exists(drive):
                print(f"Drive not found or not ready: {drive}")
                self.root.after(1000, self.poll_for_usb)
                return
            self.close_usb_explorer(drive)
            if not self.usb_dialog_opened:
                self.usb_dialog_opened = True
                file_selected = filedialog.askopenfilename(
                    title="Select a file from your USB drive",
                    initialdir=drive,
                    filetypes=[("PDF Files", "*.pdf"), ("Word Documents", "*.doc;*.docx")]
                )
                if file_selected:
                    if not file_selected.lower().endswith(('.pdf', '.doc', '.docx')):
                        messagebox.showerror("File Error", "Selected file type is not supported. Please select a PDF or Microsoft Word document.")
                        self.usb_dialog_opened = False
                        return
                    self.file_path = file_selected
                    messagebox.showinfo("USB Transfer", "File selected successfully!")
                else:
                    messagebox.showerror("USB Transfer", "No file selected. Please try again.")
                    self.usb_dialog_opened = False
        else:
            self.root.after(1000, self.poll_for_usb)


    def close_usb_explorer(self, drive):
        try:
            import win32com.client
            import urllib.parse
            shell = win32com.client.Dispatch("Shell.Application")
            for window in shell.Windows():
                try:
                    location = window.LocationURL
                    if location and location.startswith("file:/C:\\INSTAPRINTMACHINE///receivet"):
                        local_path = urllib.parse.unquote(location[8:]).replace('/', '\\')
                        if os.path.normcase(os.path.abspath(local_path)) == os.path.normcase(os.path.abspath(drive)):
                            window.Quit()
                except Exception:
                    continue
        except Exception as e:
            print("Error closing USB explorer windows:", e)


    # ------------------ Bluetooth Transfer Function ------------------
    def handle_bluetooth(self):
        try:
            subprocess.Popen(["C:\\INSTAPRINT MACHINE\\receive.bat"], shell=True)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to run receive.bat: {str(e)}")


if __name__ == "__main__":
    root = tk.Tk()
    app = InstaPrintApp(root)
    root.mainloop()
